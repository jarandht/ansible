  # vars:
  #   hosts: 
  #   sssd_conf_path: "/etc/sssd/sssd.conf"
  #   ldap_server: "ldap.lan"
  #   ldap_group: "server"
  #   ldap_user: "ldap"
  #   ldap_key: "test"
  #   cert: "-----BEGIN CERTIFICATE-----\n MIIC6jCCAdKgAwIBAgIUdmRztn7N3n1Urv/N9xuyWlbU3e0wDQYJKoZIhvcNAQEL\n BQAwEzERMA8GA1UEAwwIbGRhcC5sYWIwHhcNMjUwNjA0MTk0MTE0WhcNMjYwNjA0\n MTk0MTE0WjATMREwDwYDVQQDDAhsZGFwLmxhYjCCASIwDQYJKoZIhvcNAQEBBQAD\n ggEPADCCAQoCggEBAK3hbACBPVyuP51FleIgelU5fRzZw6elRVFYjAAg6ueC0upG\n 07yHWT9gzQGSlpJ3XojQtj4r2OK2yL7GQGejeBM0BIbT9yZT2tfo4v/1wB8zyg04\n Qy6Y5rnacNoxZBr8YvzGt8ldawnZhtUJ5eWe97ricFx0ylPG78986PAdQu+aeoua\n Q1Z0lEm+X2rfK0wmDIpwM8KFyRaCrRpLiK90qAc3vqB48UcsRrYbwykohg1TRrkR\n d9Xd+sJk8O6gX+nQv4NFRJxVNazuZCdNl7fQeKW254FFRHe8QhAf58U4M611igT+\n ob3Jv0yKuyROLkNj4AmfzLIocgGc0G5/0Lmyri8CAwEAAaM2MDQwEwYDVR0RBAww\n CoIIbGRhcC5sYW4wHQYDVR0OBBYEFMtG6doe8Ey9yTXJ9lg4dKqsVR4SMA0GCSqG\n SIb3DQEBCwUAA4IBAQAeAOlI+H03bTccwp98nNmVwfRkeSaBfN/qY39q0LoZm2Oj\n 3YV7IuSq/PkSdWMtbJuV+fks0iNv1pWZKv4ENLGO6p3mGXKLyZmrIK8bPUmqauVj\n eYA2xu3s+1ygkL/2Hl+mU42qE2lGCJEn1wBAqASPSQkWKjtpCzOZ2mF6lS+c6+Fn\n s8IXZ2jVMu3boQiPXLhuSaKmc4BeGkJR9PUajUFavjDpInw/MeeNSSsYbyUIXkRZ\n 59ow5uD5ixJEArf6HqiiAVFEQ5uCuwqm6zNbND5zDc0iJJA3XEPUn+2oBP7KW9ry\n Hj+eh6+FFrP/50tohhpwXtXhpgUBNg06U2fKuyuG\n -----END CERTIFICATE-----\n"
  #   base_dn: "dc=ldap,dc=goauthentik,dc=io"

- name: Install sssd

  hosts: "{{ hosts }}"
  become: yes
  gather_facts: false

  tasks:
    - name: remove .lan form hostnames
      set_fact:
        ansible_host_valid: "{{ ansible_host | replace('.lan', '') }}"

    - name: Add sudo rule for LDAP group
      lineinfile:
        path: /etc/sudoers.d/{{ ldap_group }}
        create: yes
        line: '"%{{ ldap_group }}" ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Add sudo rule for LDAP group
      lineinfile:
        path: /etc/sudoers.d/{{ ldap_group }}-{{ ansible_host_valid }}
        create: yes
        line: '"%{{ ldap_group }}-{{ ansible_host_valid }}" ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Install LDAP and SSSD packages
      apt:
        name:
          - sssd
          - sssd-ldap
          - ldap-utils
          - libnss-sss
          - libpam-sss
          - ca-certificates
        update_cache: yes

    - name: Write cert
      copy:
        dest: /usr/local/share/ca-certificates/authentik_ldap.crt
        content: "{{ cert }}"
        owner: "root"
        group: "root"
        mode: '0600'

    - name: Update cert index
      shell: /usr/sbin/update-ca-certificates

    - name: Configure /etc/sssd/sssd.conf
      copy:
        dest: "{{ sssd_conf_path }}"
        content: |
          [nss]
          filter_groups = root
          filter_users = root
          reconnection_retries = 3

          [sssd]
          config_file_version = 2
          reconnection_retries = 3
          domains = authentik
          services = nss, pam, ssh

          [pam]
          reconnection_retries = 3

          [domain/authentik]

          cache_credentials = false
          id_provider = ldap
          chpass_provider = ldap
          auth_provider = ldap
          access_provider = ldap
          ldap_uri = ldaps://{{ ldap_server }}:636

          ldap_schema = rfc2307bis
          ldap_search_base = {{ base_dn }}
          ldap_user_search_base = ou=users,{{ base_dn }}
          ldap_group_search_base = {{ base_dn }}

          ldap_user_object_class = user
          ldap_user_name = cn
          ldap_group_object_class = group
          ldap_group_name = cn

          ldap_access_order = filter
          ldap_access_filter = (&(|(memberOf=cn={{ ldap_group }},ou=groups,{{ base_dn }})(memberOf=cn={{ ldap_group }}-{{ ansible_host_valid }},ou=groups,{{ base_dn }}))(ak-active=TRUE))
          ldap_default_bind_dn = cn={{ ldap_user }},ou=users,{{ base_dn }}
          ldap_default_authtok = {{ ldap_key }}
          ldap_tls_reqcert = demand

          ldap_user_ssh_public_key = sshPublicKey
          override_shell = /bin/bash
          sudo_provider = ldap
        owner: root
        group: root
        mode: 0600

    - name: Ensure sssd service is enabled and restarted
      service:
        name: sssd
        state: restarted
        enabled: yes

    - name: Configure SSH to use sss_ssh_authorizedkeys
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^{{ item.key }}"
        line: "{{ item.key }} {{ item.value }}"
        state: present
      loop:
        - { key: 'AuthorizedKeysCommand', value: '/usr/bin/sss_ssh_authorizedkeys' }
        - { key: 'AuthorizedKeysCommandUser', value: 'nobody' }

    - name: Restart SSHD
      service:
        name: ssh
        state: restarted

    - name: Ensure PAM configuration for su supports SSSD
      blockinfile:
        path: /etc/pam.d/su
        block: |
          auth            sufficient      pam_sss.so
          auth            sufficient      pam_rootok.so
          auth            required        pam_unix.so use_first_pass
          account         required        pam_unix.so
          session         required        pam_unix.so