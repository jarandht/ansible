- hosts: "reboot_individually"
  become: yes
  gather_facts: false
  serial: 1
  vars:
    service_name: "your_service_name_here"  # Specify the service name here
    
  tasks:
    - name: Check if system reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Reboot non-essential server
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
      when: reboot_required.stat.exists

    - name: Check if service is running
      ansible.builtin.systemd:
        name: "{{ service }}"
        state: started
      register: service_status
      failed_when: false

    - name: Start the service if it's not running
      ansible.builtin.systemd:
        name: "{{ service }}"
        state: started
      when: service_status.status.ActiveState != 'active'
      register: service_start_status

    - name: Wait for the service to start
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: 80
        delay: 10
        timeout: 300
      when: service_status.status.ActiveState != 'active'

    - name: Confirm service is running after start attempt
      ansible.builtin.systemd:
        name: "{{ service }}"
        state: started
      register: service_check_after_start
      failed_when: false
      
#    - name: Send Discord message
#      uri:
#        url: "{{ discord_webhook_url }}"
#       method: POST
#        body_format: json
#        body: '{"The service {{ service }} failed to start."}'
#        headers:
#          Content-Type: application/json
#        status_code: 204
#        when: service_check_after_start.status.ActiveState != 'active'

    - name: Send Teams message
      uri:
        url: "{{ teams_webhook_url }}"
        method: POST
        body_format: json
        body:
          text: "The service {{ service }} failed to start."
        headers:
          Content-Type: application/json
        status_code: 200
      when: service_check_after_start.status.ActiveState != 'active'
